// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/v1/dictionary_item.proto

package v1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DictionaryItemService service

func NewDictionaryItemServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DictionaryItemService service

type DictionaryItemService interface {
	Show(ctx context.Context, in *DictionaryItemShowRequest, opts ...client.CallOption) (*DictionaryItemShowResponse, error)
	Create(ctx context.Context, in *DictionaryItemCreateRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *DictionaryItemUpdateRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DictionaryItemDeleteRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type dictionaryItemService struct {
	c    client.Client
	name string
}

func NewDictionaryItemService(name string, c client.Client) DictionaryItemService {
	return &dictionaryItemService{
		c:    c,
		name: name,
	}
}

func (c *dictionaryItemService) Show(ctx context.Context, in *DictionaryItemShowRequest, opts ...client.CallOption) (*DictionaryItemShowResponse, error) {
	req := c.c.NewRequest(c.name, "DictionaryItemService.Show", in)
	out := new(DictionaryItemShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryItemService) Create(ctx context.Context, in *DictionaryItemCreateRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "DictionaryItemService.Create", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryItemService) Update(ctx context.Context, in *DictionaryItemUpdateRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "DictionaryItemService.Update", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryItemService) Delete(ctx context.Context, in *DictionaryItemDeleteRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "DictionaryItemService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DictionaryItemService service

type DictionaryItemServiceHandler interface {
	Show(context.Context, *DictionaryItemShowRequest, *DictionaryItemShowResponse) error
	Create(context.Context, *DictionaryItemCreateRequest, *emptypb.Empty) error
	Update(context.Context, *DictionaryItemUpdateRequest, *emptypb.Empty) error
	Delete(context.Context, *DictionaryItemDeleteRequest, *emptypb.Empty) error
}

func RegisterDictionaryItemServiceHandler(s server.Server, hdlr DictionaryItemServiceHandler, opts ...server.HandlerOption) error {
	type dictionaryItemService interface {
		Show(ctx context.Context, in *DictionaryItemShowRequest, out *DictionaryItemShowResponse) error
		Create(ctx context.Context, in *DictionaryItemCreateRequest, out *emptypb.Empty) error
		Update(ctx context.Context, in *DictionaryItemUpdateRequest, out *emptypb.Empty) error
		Delete(ctx context.Context, in *DictionaryItemDeleteRequest, out *emptypb.Empty) error
	}
	type DictionaryItemService struct {
		dictionaryItemService
	}
	h := &dictionaryItemServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DictionaryItemService{h}, opts...))
}

type dictionaryItemServiceHandler struct {
	DictionaryItemServiceHandler
}

func (h *dictionaryItemServiceHandler) Show(ctx context.Context, in *DictionaryItemShowRequest, out *DictionaryItemShowResponse) error {
	return h.DictionaryItemServiceHandler.Show(ctx, in, out)
}

func (h *dictionaryItemServiceHandler) Create(ctx context.Context, in *DictionaryItemCreateRequest, out *emptypb.Empty) error {
	return h.DictionaryItemServiceHandler.Create(ctx, in, out)
}

func (h *dictionaryItemServiceHandler) Update(ctx context.Context, in *DictionaryItemUpdateRequest, out *emptypb.Empty) error {
	return h.DictionaryItemServiceHandler.Update(ctx, in, out)
}

func (h *dictionaryItemServiceHandler) Delete(ctx context.Context, in *DictionaryItemDeleteRequest, out *emptypb.Empty) error {
	return h.DictionaryItemServiceHandler.Delete(ctx, in, out)
}
